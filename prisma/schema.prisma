// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

// ----------------------------------------------------
// ENUMS
// ----------------------------------------------------

enum Role {
ADMIN     // Administrador del Sistema
VENTANA   // Administrador de Sucursal / Ventana
VENDEDOR  // Rol Operativo de Venta
}

enum TicketStatus {
PENDING   // Tiquete vendido y activo
WINNER    // Tiquete ganador (pendiente de pago)
PAID      // Tiquete pagado
CANCELLED // Tiquete anulado
}

enum ActivityType {
LOGIN
TICKET_CREATE
TICKET_CANCEL
SORTEO_CLOSURE
UPDATE_USER
UPDATE_MULTIPLIER_SETTING
SOFT_DELETE
RESTORE
}

// ----------------------------------------------------
// ENTIDADES PRINCIPALES (Organización)
// ----------------------------------------------------

// La entidad principal que representa la Banca de Lotería
model Banca {
id                      String @id @default(uuid())
name                    String @unique
code                    String @unique
defaultMinBet           Float  @default(1.00)
globalMaxPerNumber      Int?   // Límite máximo global por número

ventanas                Ventana[]
loteriaSettings         BancaLoteriaSetting[]

// Soft-Delete Fields (Trazabilidad)
isDeleted               Boolean  @default(false)
deletedAt               DateTime?
deletedBy               String?
deletedReason           String?

createdAt               DateTime @default(now())
updatedAt               DateTime @updatedAt
}

// Sucursales o puntos de venta
model Ventana {
id                      String @id @default(uuid())
bancaId                 String
name                    String
code                    String @unique
commissionMarginX       Float  // Margen operativo asignado (ej. 10x)

banca                   Banca @relation(fields: [bancaId], references: [id])
users                   User[]
tickets                 Ticket[]

// Soft-Delete Fields
isDeleted               Boolean  @default(false)
deletedAt               DateTime?
deletedBy               String?
deletedReason           String?

createdAt               DateTime @default(now())
updatedAt               DateTime @updatedAt
}

// Usuarios del sistema (Admin, Ventana, Vendedor)
model User {
id                      String @id @default(uuid())
ventanaId               String? // VENDEDOR/VENTANA pertenece a una Ventana
name                    String
email                   String @unique
password                String // Almacenada como hash (bcrypt)
role                    Role   @default(VENTANA)

ventana                 Ventana? @relation(fields: [ventanaId], references: [id])
ticketsCreated          Ticket[]
activities              ActivityLog[]

// Soft-Delete Fields
isDeleted               Boolean  @default(false)
deletedAt               DateTime?
deletedBy               String?
deletedReason           String?

createdAt               DateTime @default(now())
updatedAt               DateTime @updatedAt
}

// ----------------------------------------------------
// ENTIDADES DE JUEGO (Configuración)
// ----------------------------------------------------

// Loterías disponibles en la Banca
model Loteria {
id                      String @id @default(uuid())
name                    String @unique
rulesJson               Json?   // Reglas dinámicas (horarios, tipos de apuesta, etc.)

tickets                 Ticket[]
loteriaSettings         BancaLoteriaSetting[]

// Soft-Delete Fields
isDeleted               Boolean  @default(false)
deletedAt               DateTime?
deletedBy               String?
deletedReason           String?

createdAt               DateTime @default(now())
updatedAt               DateTime @updatedAt
}

// Configuración de reglas y multiplicadores por Banca y Lotería
model BancaLoteriaSetting {
id                      String @id @default(uuid())
bancaId                 String
loteriaId               String
baseMultiplierX         Float  // Multiplicador total de la banca (ej. 90x)
maxTotalPerSorteo       Int?   // Límite total de venta para el sorteo

banca                   Banca @relation(fields: [bancaId], references: [id])
loteria                 Loteria @relation(fields: [loteriaId], references: [id])

// Soft-Delete Fields
isDeleted               Boolean  @default(false)
deletedAt               DateTime?
deletedBy               String?
deletedReason           String?

@@unique([bancaId, loteriaId]) // Una banca solo tiene una configuración por lotería

createdAt               DateTime @default(now())
updatedAt               DateTime @updatedAt
}

// ----------------------------------------------------
// ENTIDADES TRANSACCIONALES
// ----------------------------------------------------

// Contador secuencial de tiquetes (CRÍTICO - Manejado por SQL Function)
model TicketCounter {
id                      String @id @default(uuid())
currentNumber           Int    @default(1)
lastUpdate              DateTime @default(now())
}

// Tiquete de Venta (Registro Principal)
model Ticket {
id                      String         @id @default(uuid())
ticketNumber            Int            // Número secuencial atómico
loteriaId               String
ventanaId               String
vendedorId              String
totalAmount             Float
status                  TicketStatus   @default(PENDING)

loteria                 Loteria @relation(fields: [loteriaId], references: [id])
ventana                 Ventana @relation(fields: [ventanaId], references: [id])
vendedor                User    @relation(fields: [vendedorId], references: [id])
jugadas                 Jugada[]

// Soft-Delete Fields
isDeleted               Boolean  @default(false)
deletedAt               DateTime?
deletedBy               String?
deletedReason           String?

createdAt               DateTime @default(now())
updatedAt               DateTime @updatedAt
}

// Jugada dentro de un Tiquete
model Jugada {
id                      String  @id @default(uuid())
ticketId                String
number                  String  // El número jugado (ej. "15" o "350")
amount                  Float   // Monto apostado
finalMultiplierX        Float   // Multiplicador final aplicado al momento de la venta (CRÍTICO)
payout                  Float   // Premio potencial (amount * finalMultiplierX)

ticket                  Ticket @relation(fields: [ticketId], references: [id])

// Soft-Delete Fields
isDeleted               Boolean  @default(false)
deletedAt               DateTime?
deletedBy               String?
deletedReason           String?

createdAt               DateTime @default(now())
updatedAt               DateTime @updatedAt
}

// ----------------------------------------------------
// ENTIDADES DE AUDITORÍA
// ----------------------------------------------------

// Registro de Actividad (CRÍTICO para trazabilidad)
model ActivityLog {
id                      String       @id @default(uuid())
userId                  String?      // Quién realizó la acción (puede ser SYSTEM)
action                  ActivityType
targetType              String?      // Tipo de entidad afectada (ej. 'LOTERIA', 'TICKET')
targetId                String?      // ID de la entidad afectada
details                 Json?        // Detalles del cambio (ej. { oldMultiplier: 90, newMultiplier: 85 })

user                    User? @relation(fields: [userId], references: [id])

createdAt               DateTime @default(now())
}