// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------
// ENUMS
// ----------------------------------------------------

enum Role {
  ADMIN // Administrador del Sistema
  VENTANA // Administrador de Sucursal / Ventana
  VENDEDOR // Rol Operativo de Venta
}

enum TicketStatus {
  ACTIVE // Tiquete vendido, esperando sorteo
  EVALUATED // Sorteo realizado, jugadas evaluadas
  CANCELLED // Tiquete cancelado antes del sorteo
  RESTORED // Tiquete restaurado después de ser cancelado
}

enum SorteoStatus {
  SCHEDULED
  OPEN
  EVALUATED
  CLOSED
}

enum BetType {
  NUMERO
  REVENTADO
}

enum MultiplierKind {
  NUMERO
  REVENTADO
}

enum ActivityType {
  // Autenticación y sesión
  LOGIN
  LOGOUT
  PASSWORD_CHANGE

  // Tiquetes y jugadas
  TICKET_CREATE
  TICKET_CANCEL
  TICKET_EVALUATE
  TICKET_RESTORE
  TICKET_PAY
  TICKET_PAYMENT_REVERSE
  JUGADA_EVALUATE
  JUGADA_RESTORE

  // Sorteos y adjudicación
  SORTEO_CREATE
  SORTEO_EVALUATE
  SORTEO_CLOSE
  SORTEO_REOPEN
  SORTEO_UPDATE

  // Configuración de loterías
  LOTERIA_CREATE
  LOTERIA_UPDATE
  LOTERIA_DELETE
  LOTERIA_RESTORE

  // Configuración por banca
  MULTIPLIER_SETTING_CREATE
  MULTIPLIER_SETTING_UPDATE
  MULTIPLIER_SETTING_DELETE
  MULTIPLIER_SETTING_RESTORE

  // Organización
  BANCA_CREATE
  BANCA_UPDATE
  BANCA_DELETE
  BANCA_RESTORE

  VENTANA_CREATE
  VENTANA_UPDATE
  VENTANA_DELETE
  VENTANA_RESTORE

  // Usuarios
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  USER_RESTORE
  USER_ROLE_CHANGE

  // Auditoría y reversión
  SOFT_DELETE
  RESTORE
  SYSTEM_ACTION
}

// ----------------------------------------------------
// ENTIDADES PRINCIPALES (Organización)
// ----------------------------------------------------

// La entidad principal que representa la Banca de Lotería
model Banca {
  id                 String  @id @default(uuid())
  name               String  @unique
  code               String  @unique
  isActive           Boolean @default(true) // Si la banca está operativa
  defaultMinBet      Float   @default(100.00)
  globalMaxPerNumber Int     @default(5000) // Límite máximo global por número

  address String? // Dirección física (opcional)
  phone   String? // Teléfono de contacto (opcional)
  email   String? // Correo de contacto (opcional)

  ventanas        Ventana[]
  loteriaSettings BancaLoteriaSetting[]

  // Soft-Delete Fields (Trazabilidad)
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  restrictionRules RestrictionRule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Sucursales o puntos de venta
model Ventana {
  id                String  @id @default(uuid())
  bancaId           String
  name              String
  code              String  @unique
  isActive          Boolean @default(true) // Si la ventana está operativa
  commissionMarginX Float // Margen operativo asignado (ej. 10x)

  address String? // Dirección física (opcional)
  phone   String? // Teléfono de contacto (opcional)
  email   String? // Correo de contacto (opcional)

  banca   Banca    @relation(fields: [bancaId], references: [id])
  users   User[]
  tickets Ticket[]

  // Soft-Delete Fields
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  restrictionRules RestrictionRule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Usuarios del sistema (Admin, Ventana, Vendedor)
model User {
  id        String  @id @default(uuid())
  ventanaId String? // VENDEDOR/VENTANA pertenece a una Ventana
  name      String
  email     String? @unique
  username  String  @unique @db.Citext // para case sensitive en DB
  password  String // Almacenada como hash (bcrypt)
  role      Role    @default(VENTANA)
  isActive  Boolean @default(true) // Si el usuario puede iniciar sesión

  refreshTokens RefreshToken[] // Tokens de refresco asociados al usuario

  ventana        Ventana?      @relation(fields: [ventanaId], references: [id])
  ticketsCreated Ticket[]
  activities     ActivityLog[]

  // Soft-Delete Fields
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  restrictionRules    RestrictionRule[]
  multiplierOverrides UserMultiplierOverride[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TicketPayment TicketPayment[]
}

// ----------------------------------------------------
// ENTIDADES DE JUEGO (Configuración)
// ----------------------------------------------------

// Loterías disponibles en la Banca
model Loteria {
  id        String   @id @default(uuid())
  name      String   @unique
  isActive  Boolean  @default(true) // Si la lotería está disponible para venta
  rulesJson Json? // Reglas dinámicas (horarios, tipos de apuesta, etc.)
  sorteos   Sorteo[]

  tickets         Ticket[]
  loteriaSettings BancaLoteriaSetting[]

  // Soft-Delete Fields
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  multipliers   LoteriaMultiplier[]
  userOverrides UserMultiplierOverride[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Configuración de reglas y multiplicadores por Banca y Lotería
model BancaLoteriaSetting {
  id                String @id @default(uuid())
  bancaId           String
  loteriaId         String
  baseMultiplierX   Float // Multiplicador total de la banca (ej. 90x)
  maxTotalPerSorteo Int? // Límite total de venta para el sorteo

  banca   Banca   @relation(fields: [bancaId], references: [id])
  loteria Loteria @relation(fields: [loteriaId], references: [id])

  // Soft-Delete Fields
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bancaId, loteriaId]) // Una banca solo tiene una configuración por lotería
}

// ----------------------------------------------------
// ENTIDADES TRANSACCIONALES
// ----------------------------------------------------

// Contador secuencial de tiquetes (CRÍTICO - Manejado por SQL Function)
model TicketCounter {
  id            String   @id @default("DEFAULT")
  currentNumber Int      @default(0)
  lastUpdate    DateTime @default(now())
}

// Tiquete de Venta (Registro Principal)
model Ticket {
  id           String       @id @default(uuid())
  ticketNumber Int // Número secuencial atómico
  loteriaId    String
  ventanaId    String
  vendedorId   String
  sorteoId     String // Se asigna cuando se abre el sorteo
  totalAmount  Float
  status       TicketStatus @default(ACTIVE)

  loteria  Loteria  @relation(fields: [loteriaId], references: [id])
  ventana  Ventana  @relation(fields: [ventanaId], references: [id])
  vendedor User     @relation(fields: [vendedorId], references: [id])
  sorteo   Sorteo   @relation(fields: [sorteoId], references: [id])
  jugadas  Jugada[]

  isWinner Boolean @default(false) // Se actualiza si alguna jugada fue premiada
  isActive Boolean @default(true) // Se desactiva al cerrar el sorteo

  // Soft-Delete Fields
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  TicketPayment TicketPayment[]

  @@index([sorteoId])
}

model TicketPayment {
  id          String   @id @default(uuid())
  ticketId    String
  amountPaid  Float
  paidById    String
  paymentDate DateTime @default(now())
  method      String? // efectivo, transferencia, etc.
  notes       String?

  isPartial       Boolean @default(false)
  remainingAmount Float? // solo si es pago parcial

  idempotencyKey String? @unique //evita pagos duplicados

  ticket Ticket @relation(fields: [ticketId], references: [id])
  paidBy User   @relation(fields: [paidById], references: [id])

  isReversed Boolean   @default(false)
  reversedAt DateTime?
  reversedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ticketId, isReversed]) // evita doble pago
}

// Jugada dentro de un Tiquete
model Jugada {
  id               String @id @default(uuid())
  ticketId         String
  number           String
  amount           Float
  multiplierId     String
  finalMultiplierX Float

  // NOMBRA la relación de venta (sale-time)
  multiplier LoteriaMultiplier @relation("JugadaMultiplierAtSale", fields: [multiplierId], references: [id])

  // --- Reventado (evaluación) ---
  type                BetType @default(NUMERO)
  reventadoNumber     String?
  settledMultiplierX  Float?
  settledMultiplierId String?

  // NOMBRA la relación de liquidación (settlement)
  settledMultiplier LoteriaMultiplier? @relation("JugadaMultiplierSettled", fields: [settledMultiplierId], references: [id])

  isWinner Boolean @default(false)
  payout   Float?

  ticket Ticket @relation(fields: [ticketId], references: [id])

  // Soft-Delete
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
  @@index([type])
  @@index([reventadoNumber])
  @@index([settledMultiplierId])
}

model Sorteo {
  id            String       @id @default(uuid())
  name          String       @unique
  loteriaId     String
  scheduledAt   DateTime // Fecha/hora programada
  status        SorteoStatus @default(SCHEDULED)
  winningNumber String? // Número ganador cuando se evalúa

  extraOutcomeCode  String? // etiqueta neutral
  extraMultiplierId String? // FK al multiplicador elegido
  extraMultiplier   LoteriaMultiplier? @relation("SorteoExtraMultiplier", fields: [extraMultiplierId], references: [id])
  extraMultiplierX  Float? // snapshot del X aplicado

  loteria Loteria  @relation(fields: [loteriaId], references: [id])
  tickets Ticket[]

  // Soft-Delete Fields (consistente con el resto)
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([loteriaId, scheduledAt])
  @@index([extraMultiplierId])
}

// ----------------------------------------------------
// ENTIDADES DE AUDITORÍA
// ----------------------------------------------------

// Registro de Actividad (CRÍTICO para trazabilidad)
model ActivityLog {
  id         String       @id @default(uuid())
  userId     String? // Quién realizó la acción (puede ser SYSTEM)
  action     ActivityType
  targetType String? // Tipo de entidad afectada (ej. 'LOTERIA', 'TICKET')
  targetId   String? // ID de la entidad afectada
  details    Json? // Detalles del cambio (ej. { oldMultiplier: 90, newMultiplier: 85 })

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model RestrictionRule {
  id            String    @id @default(uuid())
  bancaId       String? // Si aplica a toda la banca
  ventanaId     String? // Si aplica a una ventana específica
  userId        String? // Si aplica a un vendedor específico
  number        String? // Si aplica a un número específico
  maxAmount     Float? // Monto máximo permitido por jugada
  maxTotal      Float? // Monto total permitido por tiquete
  appliesToDate DateTime? // Si aplica solo en una fecha específica
  appliesToHour Int? // Si aplica solo en una hora específica

  banca   Banca?   @relation(fields: [bancaId], references: [id])
  ventana Ventana? @relation(fields: [ventanaId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoteriaMultiplier {
  id                String    @id @default(uuid())
  loteriaId         String
  name              String
  valueX            Float
  isActive          Boolean   @default(true)
  appliesToDate     DateTime?
  appliesToSorteoId String?

  loteria Loteria @relation(fields: [loteriaId], references: [id])

  // BACK-RELATIONS con nombres que coinciden
  jugadasAtSale  Jugada[] @relation("JugadaMultiplierAtSale")
  jugadasSettled Jugada[] @relation("JugadaMultiplierSettled")

  appliedInSorteos Sorteo[] @relation("SorteoExtraMultiplier")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // (Opcional) si diferenciás tipo de multiplicador:
  kind MultiplierKind @default(NUMERO)

  @@index([loteriaId, kind, isActive])
  @@index([appliesToSorteoId])
}

model UserMultiplierOverride {
  id              String @id @default(uuid())
  userId          String
  loteriaId       String
  multiplierType  String // Ej. "Base", "Reventado Roja", "Reventado Verde"
  baseMultiplierX Float // Ej. 85x, 90x

  user    User    @relation(fields: [userId], references: [id])
  loteria Loteria @relation(fields: [loteriaId], references: [id])

  // Soft-Delete Fields
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, loteriaId, multiplierType])
}

model RefreshToken {
  id        String   @id @default(uuid()) // Identificador único del token
  userId    String // ID del usuario asociado
  token     String   @unique // Cadena del token de refresco (debe ser única)
  revoked   Boolean  @default(false) // Indica si el token fue revocado
  expiresAt DateTime // Fecha y hora de expiración

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relación con el modelo User

  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de última modificación (automática)
}
