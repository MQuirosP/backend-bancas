generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Banca {
  id                   String                @id @default(uuid()) @db.Uuid
  name                 String                @unique
  code                 String                @unique
  defaultMinBet        Float                 @default(100.00)
  globalMaxPerNumber   Int                   @default(5000)
  deletedAt            DateTime?
  deletedBy            String?
  deletedReason        String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  address              String?
  email                String?
  phone                String?
  isActive             Boolean               @default(true)
  salesCutoffMinutes   Int                   @default(5)
  commissionPolicyJson Json? // Política de comisiones jerárquica
  loteriaSettings      BancaLoteriaSetting[]
  restrictionRules     RestrictionRule[]
  ventanas             Ventana[]
}

model Ventana {
  id                   String    @id @default(uuid()) @db.Uuid
  bancaId              String    @db.Uuid // <- requerido
  name                 String
  code                 String    @unique
  commissionMarginX    Float
  deletedAt            DateTime?
  deletedBy            String?
  deletedReason        String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  address              String?
  email                String?
  phone                String?
  isActive             Boolean   @default(true)
  commissionPolicyJson Json? // Política de comisiones jerárquica

  banca Banca @relation(fields: [bancaId], references: [id]) // <- relación requerida

  restrictionRules    RestrictionRule[]
  tickets             Ticket[]
  users               User[]
  multiplierOverrides MultiplierOverride[]

  @@index([code])
  @@index([email])
  @@index([name])
  @@index([phone])
  @@index([code(ops: raw("gin_trgm_ops"))], map: "idx_ventana_code_trgm", type: Gin)
  @@index([email(ops: raw("gin_trgm_ops"))], map: "idx_ventana_email_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_ventana_name_trgm", type: Gin)
  @@index([phone(ops: raw("gin_trgm_ops"))], map: "idx_ventana_phone_trgm", type: Gin)
}

model User {
  id                   String    @id @default(uuid()) @db.Uuid
  ventanaId            String?   @db.Uuid
  name                 String
  email                String?   @unique
  phone                String?
  password             String
  role                 Role      @default(VENTANA)
  deletedAt            DateTime?
  deletedBy            String?
  deletedReason        String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  isActive             Boolean   @default(true)
  username             String    @unique @db.Citext
  code                 String?   @unique
  commissionPolicyJson Json? // Política de comisiones jerárquica

  activities          ActivityLog[]
  refreshTokens       RefreshToken[]
  restrictionRules    RestrictionRule[]
  ticketsCreated      Ticket[]
  TicketPayment       TicketPayment[]
  ventana             Ventana?             @relation(fields: [ventanaId], references: [id])
  multiplierOverrides MultiplierOverride[]
  savedReports        SavedReport[]
  exportJobs          ExportJob[]
  alerts              Alert[]
  apiKeys             ApiKey[]

  @@index([code])
  @@index([email])
  @@index([name])
  @@index([username])
  @@index([code(ops: raw("gin_trgm_ops"))], map: "idx_user_code_trgm", type: Gin)
  @@index([email(ops: raw("gin_trgm_ops"))], map: "idx_user_email_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_user_name_trgm", type: Gin)
  @@index([username(ops: raw("gin_trgm_ops"))], map: "idx_user_username_trgm", type: Gin)
}

model Loteria {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String                @unique
  rulesJson           Json?
  deletedAt           DateTime?
  deletedBy           String?
  deletedReason       String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  isActive            Boolean               @default(true)
  loteriaSettings     BancaLoteriaSetting[]
  multipliers         LoteriaMultiplier[]
  sorteos             Sorteo[]
  tickets             Ticket[]
  multiplierOverrides MultiplierOverride[]

  @@index([name])
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_loteria_name_trgm", type: Gin)
}

model BancaLoteriaSetting {
  id                String    @id @default(uuid()) @db.Uuid
  bancaId           String    @db.Uuid
  loteriaId         String    @db.Uuid
  baseMultiplierX   Float
  maxTotalPerSorteo Int?
  deletedAt         DateTime?
  deletedBy         String?
  deletedReason     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  banca             Banca     @relation(fields: [bancaId], references: [id])
  loteria           Loteria   @relation(fields: [loteriaId], references: [id])

  @@unique([bancaId, loteriaId])
}

model Ticket {
  id            String       @id @default(uuid()) @db.Uuid
  ticketNumber  String       @unique @default(dbgenerated("generate_ticket_number()")) @db.VarChar(24)
  loteriaId     String       @db.Uuid
  ventanaId     String       @db.Uuid
  vendedorId    String       @db.Uuid
  totalAmount   Float
  status        TicketStatus @default(ACTIVE)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isActive      Boolean      @default(true)
  isWinner      Boolean      @default(false)
  sorteoId      String       @db.Uuid

  jugadas       Jugada[]
  loteria       Loteria         @relation(fields: [loteriaId], references: [id])
  sorteo        Sorteo          @relation(fields: [sorteoId], references: [id])
  vendedor      User            @relation(fields: [vendedorId], references: [id])
  ventana       Ventana         @relation(fields: [ventanaId], references: [id])
  TicketPayment TicketPayment[]

  @@index([sorteoId])
  @@index([vendedorId, createdAt])
}

model TicketPayment {
  id              String    @id @default(uuid()) @db.Uuid
  ticketId        String    @db.Uuid
  amountPaid      Float
  paidById        String    @db.Uuid
  paymentDate     DateTime  @default(now())
  method          String?
  notes           String?
  isReversed      Boolean   @default(false)
  reversedAt      DateTime?
  reversedBy      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  idempotencyKey  String?   @unique
  isPartial       Boolean   @default(false)
  remainingAmount Float?

  paidBy User   @relation(fields: [paidById], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@unique([ticketId, isReversed])
}

model Jugada {
  id                String    @id @default(uuid()) @db.Uuid
  ticketId          String    @db.Uuid
  number            String
  amount            Float
  finalMultiplierX  Float
  payout            Float?
  isActive          Boolean   @default(true)
  deletedAt         DateTime?
  deletedBy         String?
  deletedReason     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isWinner          Boolean   @default(false)
  multiplierId      String?   @db.Uuid
  reventadoNumber   String?
  type              BetType   @default(NUMERO)
  commissionPercent Float     @default(0) // Snapshot inmutable: % de comisión aplicado
  commissionAmount  Float     @default(0) // Snapshot inmutable: monto calculado
  commissionOrigin  String? // Snapshot inmutable: "user"|"ventana"|"banca"
  commissionRuleId  String? // Snapshot inmutable: ID de la regla que aplicó

  multiplier LoteriaMultiplier? @relation("JugadaMultiplierAtSale", fields: [multiplierId], references: [id])
  ticket     Ticket             @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@index([type])
  @@index([reventadoNumber])
}

model Sorteo {
  id                String       @id @default(uuid()) @db.Uuid
  loteriaId         String       @db.Uuid
  scheduledAt       DateTime
  status            SorteoStatus @default(SCHEDULED)
  winningNumber     String?
  isActive          Boolean      @default(true)
  deletedAt         DateTime?
  deletedBy         String?
  deletedReason     String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  name              String
  extraMultiplierId String?      @db.Uuid
  extraMultiplierX  Float?
  extraOutcomeCode  String?

  extraMultiplier LoteriaMultiplier? @relation("SorteoExtraMultiplier", fields: [extraMultiplierId], references: [id])
  loteria         Loteria            @relation(fields: [loteriaId], references: [id])
  tickets         Ticket[]

  @@index([loteriaId, scheduledAt])
  @@index([extraMultiplierId])
  @@index([name])
  @@index([winningNumber])
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_sorteo_name_trgm", type: Gin)
  @@index([winningNumber(ops: raw("gin_trgm_ops"))], map: "idx_sorteo_winning_trgm", type: Gin)
  @@unique([loteriaId, scheduledAt])
}

model ActivityLog {
  id         String       @id @default(uuid()) @db.Uuid
  userId     String?      @db.Uuid
  action     ActivityType
  targetType String?
  targetId   String?
  details    Json?
  createdAt  DateTime     @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model RestrictionRule {
  id                 String    @id @default(uuid()) @db.Uuid
  bancaId            String?   @db.Uuid
  ventanaId          String?   @db.Uuid
  userId             String?   @db.Uuid
  number             String?
  maxAmount          Float?
  maxTotal           Float?
  appliesToDate      DateTime?
  appliesToHour      Int?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  salesCutoffMinutes Int?

  banca   Banca?   @relation(fields: [bancaId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])
  ventana Ventana? @relation(fields: [ventanaId], references: [id])
}

model LoteriaMultiplier {
  id                String         @id @default(uuid()) @db.Uuid
  loteriaId         String         @db.Uuid
  name              String
  valueX            Float
  isActive          Boolean        @default(true)
  appliesToDate     DateTime?
  appliesToSorteoId String?        @db.Uuid
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  kind              MultiplierKind @default(NUMERO)

  jugadasAtSale    Jugada[] @relation("JugadaMultiplierAtSale")
  loteria          Loteria  @relation(fields: [loteriaId], references: [id])
  appliedInSorteos Sorteo[] @relation("SorteoExtraMultiplier")

  @@index([loteriaId, kind, isActive])
  @@index([appliesToSorteoId])
}

model MultiplierOverride {
  id              String        @id @default(uuid()) @db.Uuid
  scope           OverrideScope
  userId          String?       @db.Uuid
  ventanaId       String?       @db.Uuid
  loteriaId       String        @db.Uuid
  multiplierType  String
  baseMultiplierX Float
  isActive        Boolean       @default(true)
  deletedAt       DateTime?
  deletedBy       String?
  deletedReason   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  ventana Ventana? @relation(fields: [ventanaId], references: [id])
  loteria Loteria  @relation(fields: [loteriaId], references: [id])

  @@unique([scope, userId, ventanaId, loteriaId, multiplierType], map: "uniq_override_scope_target")
  @@index([scope, userId, ventanaId, loteriaId, multiplierType], map: "idx_override_lookup")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ==================== MÓDULO DE VENTAS Y ANALÍTICA ====================

model SavedReport {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  userId    String   @db.Uuid
  filters   Json // Filtros guardados (scope, date, ventanaId, etc.)
  schedule  Json? // Programación opcional: { frequency: "daily|weekly|monthly", recipients: ["email@..."] }
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules ReportSchedule[]

  @@index([userId, isActive])
}

model ExportJob {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @db.Uuid
  format         ExportFormat @default(CSV)
  filters        Json // Filtros aplicados
  status         JobStatus    @default(PENDING)
  fileUrl        String? // URL de descarga cuando status=COMPLETED
  errorMessage   String?
  progress       Int          @default(0) // 0-100
  totalRecords   Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  completedAt    DateTime?
  idempotencyKey String?      @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([status, createdAt])
}

model Alert {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  userId        String    @db.Uuid
  dimension     String // ventana|vendedor|loteria|sorteo
  targetId      String? // ID de la entidad (ventanaId, vendedorId, etc.)
  condition     Json // { type: "threshold|spike|drop", operator: "gt|lt", value: 1000 }
  isActive      Boolean   @default(true)
  lastFiredAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  notifyEmail   String?
  notifyWebhook String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive, lastFiredAt])
  @@index([userId, isActive])
}

model ApiKey {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  key        String    @unique // Hash de la key (bcrypt)
  userId     String?   @db.Uuid // Si es de un usuario específico
  scopes     String[] // ["read:sales", "read:metrics", "write:reports"]
  isActive   Boolean   @default(true)
  expiresAt  DateTime?
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key, isActive])
  @@index([userId, isActive])
}

model Webhook {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  url         String
  events      String[] // ["sales.summary.closedHour", "sales.ticket.created", etc.]
  isActive    Boolean   @default(true)
  secret      String? // Para firmar payloads (HMAC)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastFiredAt DateTime?
  failCount   Int       @default(0)

  deliveries WebhookDelivery[]

  @@index([isActive])
}

model WebhookDelivery {
  id           String   @id @default(uuid()) @db.Uuid
  webhookId    String   @db.Uuid
  event        String
  payload      Json
  status       Int // HTTP status code
  responseBody String?
  attempt      Int      @default(1)
  createdAt    DateTime @default(now())

  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, createdAt])
  @@index([createdAt])
}

model ReportSchedule {
  id         String    @id @default(uuid()) @db.Uuid
  reportId   String    @db.Uuid
  frequency  String // "daily"|"weekly"|"monthly"
  recipients String[] // Emails
  nextRunAt  DateTime
  lastRunAt  DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  report SavedReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([isActive, nextRunAt])
}

model Goal {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  dimension   String // "ventana"|"vendedor"|"global"
  targetId    String? // ID de la entidad (ventanaId, vendedorId)
  targetValue Float // Objetivo numérico
  period      String // "day"|"week"|"month"|"year"
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([dimension, targetId, isActive])
  @@index([period, isActive])
}

enum OverrideScope {
  USER
  VENTANA
}

enum Role {
  ADMIN
  VENTANA
  VENDEDOR
}

enum TicketStatus {
  ACTIVE
  EVALUATED
  CANCELLED
  RESTORED
}

enum SorteoStatus {
  SCHEDULED
  OPEN
  EVALUATED
  CLOSED
}

enum BetType {
  NUMERO
  REVENTADO
}

enum MultiplierKind {
  NUMERO
  REVENTADO
}

enum ActivityType {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  TICKET_CREATE
  TICKET_CANCEL
  TICKET_EVALUATE
  TICKET_RESTORE
  JUGADA_EVALUATE
  JUGADA_RESTORE
  SORTEO_CREATE
  SORTEO_EVALUATE
  SORTEO_CLOSE
  SORTEO_REOPEN
  LOTERIA_CREATE
  LOTERIA_UPDATE
  LOTERIA_DELETE
  LOTERIA_RESTORE
  MULTIPLIER_SETTING_CREATE
  MULTIPLIER_SETTING_UPDATE
  MULTIPLIER_SETTING_DELETE
  MULTIPLIER_SETTING_RESTORE
  BANCA_CREATE
  BANCA_UPDATE
  BANCA_DELETE
  BANCA_RESTORE
  VENTANA_CREATE
  VENTANA_UPDATE
  VENTANA_DELETE
  VENTANA_RESTORE
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  USER_RESTORE
  USER_ROLE_CHANGE
  SOFT_DELETE
  RESTORE
  SYSTEM_ACTION
  SORTEO_UPDATE
  TICKET_PAY
  TICKET_PAYMENT_REVERSE
  SORTEO_OPEN
}

enum ExportFormat {
  CSV
  XLSX
  JSON
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
