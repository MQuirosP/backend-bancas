generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Banca {
  id                 String                @id @default(uuid()) @db.Uuid
  name               String                @unique
  code               String                @unique
  defaultMinBet      Float                 @default(100.00)
  globalMaxPerNumber Int                   @default(5000)
  isDeleted          Boolean               @default(false)
  deletedAt          DateTime?
  deletedBy          String?
  deletedReason      String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  address            String?
  email              String?
  phone              String?
  isActive           Boolean               @default(true)
  salesCutoffMinutes Int                   @default(5)
  loteriaSettings    BancaLoteriaSetting[]
  restrictionRules   RestrictionRule[]
  ventanas           Ventana[]
}

model Ventana {
  id                        String                      @id @default(uuid()) @db.Uuid
  bancaId                   String
  name                      String
  code                      String                      @unique
  commissionMarginX         Float
  isDeleted                 Boolean                     @default(false)
  deletedAt                 DateTime?
  deletedBy                 String?
  deletedReason             String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  address                   String?
  email                     String?
  phone                     String?
  isActive                  Boolean                     @default(true)
  restrictionRules          RestrictionRule[]
  tickets                   Ticket[]
  users                     User[]
  banca                     Banca                       @relation(fields: [bancaId], references: [id])
  VentanaMultiplierOverride VentanaMultiplierOverride[]

  @@index([code])
  @@index([email])
  @@index([name])
  @@index([phone])
  @@index([code(ops: raw("gin_trgm_ops"))], map: "idx_ventana_code_trgm", type: Gin)
  @@index([email(ops: raw("gin_trgm_ops"))], map: "idx_ventana_email_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_ventana_name_trgm", type: Gin)
  @@index([phone(ops: raw("gin_trgm_ops"))], map: "idx_ventana_phone_trgm", type: Gin)
}

model User {
  id                  String                   @id @default(uuid()) @db.Uuid
  ventanaId           String?
  name                String
  email               String?                  @unique
  phone               String?
  password            String
  role                Role                     @default(VENTANA)
  isDeleted           Boolean                  @default(false)
  deletedAt           DateTime?
  deletedBy           String?
  deletedReason       String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  isActive            Boolean                  @default(true)
  username            String                   @unique @db.Citext
  code                String?                  @unique
  activities          ActivityLog[]
  refreshTokens       RefreshToken[]
  restrictionRules    RestrictionRule[]
  ticketsCreated      Ticket[]
  TicketPayment       TicketPayment[]
  ventana             Ventana?                 @relation(fields: [ventanaId], references: [id])
  multiplierOverrides UserMultiplierOverride[]

  @@index([code])
  @@index([email])
  @@index([name])
  @@index([username])
  @@index([code(ops: raw("gin_trgm_ops"))], map: "idx_user_code_trgm", type: Gin)
  @@index([email(ops: raw("gin_trgm_ops"))], map: "idx_user_email_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_user_name_trgm", type: Gin)
  @@index([username(ops: raw("gin_trgm_ops"))], map: "idx_user_username_trgm", type: Gin)
}

model Loteria {
  id                        String                      @id @default(uuid()) @db.Uuid
  name                      String                      @unique
  rulesJson                 Json?
  isDeleted                 Boolean                     @default(false)
  deletedAt                 DateTime?
  deletedBy                 String?
  deletedReason             String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  isActive                  Boolean                     @default(true)
  loteriaSettings           BancaLoteriaSetting[]
  multipliers               LoteriaMultiplier[]
  sorteos                   Sorteo[]
  tickets                   Ticket[]
  userOverrides             UserMultiplierOverride[]
  VentanaMultiplierOverride VentanaMultiplierOverride[]

  @@index([name])
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_loteria_name_trgm", type: Gin)
}

model BancaLoteriaSetting {
  id                String    @id @default(uuid()) @db.Uuid
  bancaId           String
  loteriaId         String
  baseMultiplierX   Float
  maxTotalPerSorteo Int?
  isDeleted         Boolean   @default(false)
  deletedAt         DateTime?
  deletedBy         String?
  deletedReason     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  banca             Banca     @relation(fields: [bancaId], references: [id])
  loteria           Loteria   @relation(fields: [loteriaId], references: [id])

  @@unique([bancaId, loteriaId])
}

model TicketCounter {
  id            String   @id @default("DEFAULT")
  currentNumber Int      @default(0)
  lastUpdate    DateTime @default(now())
}

model Ticket {
  id            String          @id @default(uuid()) @db.Uuid
  ticketNumber  Int             @unique @default(autoincrement())
  loteriaId     String
  ventanaId     String
  vendedorId    String
  totalAmount   Float
  status        TicketStatus    @default(ACTIVE)
  isDeleted     Boolean         @default(false)
  deletedAt     DateTime?
  deletedBy     String?
  deletedReason String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isActive      Boolean         @default(true)
  isWinner      Boolean         @default(false)
  sorteoId      String
  jugadas       Jugada[]
  loteria       Loteria         @relation(fields: [loteriaId], references: [id])
  sorteo        Sorteo          @relation(fields: [sorteoId], references: [id])
  vendedor      User            @relation(fields: [vendedorId], references: [id])
  ventana       Ventana         @relation(fields: [ventanaId], references: [id])
  TicketPayment TicketPayment[]

  @@index([sorteoId])
  @@index([vendedorId, createdAt])
}

model TicketPayment {
  id              String    @id @default(uuid()) @db.Uuid
  ticketId        String
  amountPaid      Float
  paidById        String
  paymentDate     DateTime  @default(now())
  method          String?
  notes           String?
  isReversed      Boolean   @default(false)
  reversedAt      DateTime?
  reversedBy      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  idempotencyKey  String?   @unique
  isPartial       Boolean   @default(false)
  remainingAmount Float?
  paidBy          User      @relation(fields: [paidById], references: [id])
  ticket          Ticket    @relation(fields: [ticketId], references: [id])

  @@unique([ticketId, isReversed])
}

model Jugada {
  id               String             @id @default(uuid()) @db.Uuid
  ticketId         String
  number           String
  amount           Float
  finalMultiplierX Float
  payout           Float?
  isActive         Boolean            @default(true)
  deletedAt        DateTime?
  deletedBy        String?
  deletedReason    String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isWinner         Boolean            @default(false)
  multiplierId     String?
  reventadoNumber  String?
  type             BetType            @default(NUMERO)
  multiplier       LoteriaMultiplier? @relation("JugadaMultiplierAtSale", fields: [multiplierId], references: [id])
  ticket           Ticket             @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@index([type])
  @@index([reventadoNumber])
}

model Sorteo {
  id                String             @id @default(uuid()) @db.Uuid
  loteriaId         String
  scheduledAt       DateTime
  status            SorteoStatus       @default(SCHEDULED)
  winningNumber     String?
  isActive          Boolean            @default(true)
  deletedAt         DateTime?
  deletedBy         String?
  deletedReason     String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  name              String
  extraMultiplierId String?
  extraMultiplierX  Float?
  extraOutcomeCode  String?
  extraMultiplier   LoteriaMultiplier? @relation("SorteoExtraMultiplier", fields: [extraMultiplierId], references: [id])
  loteria           Loteria            @relation(fields: [loteriaId], references: [id])
  tickets           Ticket[]

  @@index([loteriaId, scheduledAt])
  @@index([extraMultiplierId])
  @@index([name])
  @@index([winningNumber])
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_sorteo_name_trgm", type: Gin)
  @@index([winningNumber(ops: raw("gin_trgm_ops"))], map: "idx_sorteo_winning_trgm", type: Gin)
}

model ActivityLog {
  id         String       @id @default(uuid()) @db.Uuid
  userId     String?
  action     ActivityType
  targetType String?
  targetId   String?
  details    Json?
  createdAt  DateTime     @default(now())
  user       User?        @relation(fields: [userId], references: [id])
}

model RestrictionRule {
  id                 String    @id @default(uuid()) @db.Uuid
  bancaId            String?
  ventanaId          String?
  userId             String?
  number             String?
  maxAmount          Float?
  maxTotal           Float?
  appliesToDate      DateTime?
  appliesToHour      Int?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  salesCutoffMinutes Int?
  banca              Banca?    @relation(fields: [bancaId], references: [id])
  user               User?     @relation(fields: [userId], references: [id])
  ventana            Ventana?  @relation(fields: [ventanaId], references: [id])
}

model LoteriaMultiplier {
  id                String         @id @default(uuid()) @db.Uuid
  loteriaId         String
  name              String
  valueX            Float
  isActive          Boolean        @default(true)
  appliesToDate     DateTime?
  appliesToSorteoId String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  kind              MultiplierKind @default(NUMERO)
  jugadasAtSale     Jugada[]       @relation("JugadaMultiplierAtSale")
  loteria           Loteria        @relation(fields: [loteriaId], references: [id])
  appliedInSorteos  Sorteo[]       @relation("SorteoExtraMultiplier")

  @@index([loteriaId, kind, isActive])
  @@index([appliesToSorteoId])
}

model UserMultiplierOverride {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String
  loteriaId       String
  baseMultiplierX Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  deletedBy       String?
  deletedReason   String?
  isDeleted       Boolean   @default(false)
  multiplierType  String
  loteria         Loteria   @relation(fields: [loteriaId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, loteriaId, multiplierType])
}

model VentanaMultiplierOverride {
  id              String    @id @default(uuid()) @db.Uuid
  ventanaId       String
  loteriaId       String
  baseMultiplierX Float
  multiplierType  String
  isActive        Boolean   @default(true)
  deletedAt       DateTime?
  deletedBy       String?
  deletedReason   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  ventana Ventana @relation(fields: [ventanaId], references: [id])
  loteria Loteria @relation(fields: [loteriaId], references: [id])

  @@unique([ventanaId, loteriaId, multiplierType])
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String
  token     String   @unique
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  VENTANA
  VENDEDOR
}

enum TicketStatus {
  ACTIVE
  EVALUATED
  CANCELLED
  RESTORED
}

enum SorteoStatus {
  SCHEDULED
  OPEN
  EVALUATED
  CLOSED
}

enum BetType {
  NUMERO
  REVENTADO
}

enum MultiplierKind {
  NUMERO
  REVENTADO
}

enum ActivityType {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  TICKET_CREATE
  TICKET_CANCEL
  TICKET_EVALUATE
  TICKET_RESTORE
  JUGADA_EVALUATE
  JUGADA_RESTORE
  SORTEO_CREATE
  SORTEO_EVALUATE
  SORTEO_CLOSE
  SORTEO_REOPEN
  LOTERIA_CREATE
  LOTERIA_UPDATE
  LOTERIA_DELETE
  LOTERIA_RESTORE
  MULTIPLIER_SETTING_CREATE
  MULTIPLIER_SETTING_UPDATE
  MULTIPLIER_SETTING_DELETE
  MULTIPLIER_SETTING_RESTORE
  BANCA_CREATE
  BANCA_UPDATE
  BANCA_DELETE
  BANCA_RESTORE
  VENTANA_CREATE
  VENTANA_UPDATE
  VENTANA_DELETE
  VENTANA_RESTORE
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  USER_RESTORE
  USER_ROLE_CHANGE
  SOFT_DELETE
  RESTORE
  SYSTEM_ACTION
  SORTEO_UPDATE
  TICKET_PAY
  TICKET_PAYMENT_REVERSE
  SORTEO_OPEN
}
